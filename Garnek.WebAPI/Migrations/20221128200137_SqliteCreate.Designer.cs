// <auto-generated />
using System;
using Garnek.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Garnek.WebAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221128200137_SqliteCreate")]
    partial class SqliteCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Garnek.Model.DatabaseModels.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PolishLabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e815b8a1-697a-4122-bf97-7b35e4d1bd37"),
                            CreatedAt = new DateTime(2022, 11, 28, 20, 1, 36, 908, DateTimeKind.Utc).AddTicks(3070),
                            Name = "People",
                            PolishLabel = "Osoby 💆🏼‍"
                        },
                        new
                        {
                            Id = new Guid("50c55078-aa05-482f-ae18-e93680582fd0"),
                            CreatedAt = new DateTime(2022, 11, 28, 20, 1, 36, 908, DateTimeKind.Utc).AddTicks(3140),
                            Name = "Places",
                            PolishLabel = "Miejsca 🌁"
                        },
                        new
                        {
                            Id = new Guid("a5642ae8-f955-41fa-92ea-309de117c617"),
                            CreatedAt = new DateTime(2022, 11, 28, 20, 1, 36, 908, DateTimeKind.Utc).AddTicks(3140),
                            Name = "Things",
                            PolishLabel = "Rzeczy 🎸"
                        });
                });

            modelBuilder.Entity("Garnek.Model.DatabaseModels.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Garnek.Model.DatabaseModels.Phrase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Phrases");
                });

            modelBuilder.Entity("Garnek.Model.DatabaseModels.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Points")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Garnek.Model.DatabaseModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Garnek.Model.DatabaseModels.Phrase", b =>
                {
                    b.HasOne("Garnek.Model.DatabaseModels.Category", "Category")
                        .WithMany("Phrases")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Garnek.Model.DatabaseModels.User", "User")
                        .WithMany("Phrases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Garnek.Model.DatabaseModels.User", b =>
                {
                    b.HasOne("Garnek.Model.DatabaseModels.Game", "Game")
                        .WithMany("Users")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Garnek.Model.DatabaseModels.Team", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Game");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Garnek.Model.DatabaseModels.Category", b =>
                {
                    b.Navigation("Phrases");
                });

            modelBuilder.Entity("Garnek.Model.DatabaseModels.Game", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Garnek.Model.DatabaseModels.Team", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Garnek.Model.DatabaseModels.User", b =>
                {
                    b.Navigation("Phrases");
                });
#pragma warning restore 612, 618
        }
    }
}
